/*
 *
 * Copyright 2023 keington.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * /
 */

package utils

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	v1 "redis-sentinel/api/v1"
)

// generateMetaInformation generates the meta information
func generateMetaInformation(resourceKind string, apiVersion string) metav1.TypeMeta {
	return metav1.TypeMeta{
		Kind:       resourceKind,
		APIVersion: apiVersion,
	}
}

// generateObjectMetaInformation generates the object meta information
func generateObjectMetaInformation(name string, namespace string, labels map[string]string, annotations map[string]string) metav1.ObjectMeta {
	return metav1.ObjectMeta{
		Name:        name,
		Namespace:   namespace,
		Labels:      labels,
		Annotations: annotations,
	}
}

// AddOwnerRefToObject adds the owner references to object
func AddOwnerRefToObject(obj metav1.Object, ownerRef metav1.OwnerReference) {
	obj.SetOwnerReferences(append(obj.GetOwnerReferences(), ownerRef))
}

// RedisSentinelAsOwner generates and returns object reference
func redisSentinelAsOwner(cr *v1.RedisSentinel) metav1.OwnerReference {
	trueVar := true
	return metav1.OwnerReference{
		APIVersion: cr.APIVersion,
		Kind:       cr.Kind,
		Name:       cr.Name,
		UID:        cr.UID,
		Controller: &trueVar,
	}
}

// generateStatefulSetsAnts generates and returns stateFulSet annotations
func generateStatefulSetsAnts(stsMeta metav1.ObjectMeta) map[string]string {
	Ants := map[string]string{
		"redis.opsTreeLabs.in":       "true",
		"redis.opsTreeLabs.instance": stsMeta.GetName(),
	}
	for k, v := range stsMeta.GetAnnotations() {
		Ants[k] = v
	}
	return filterAnnotations(Ants)
}

// filterAnnotations Remove autogenerated annotations which pose no use to downstream objects (Services,Pods,etc.)
func filterAnnotations(Ants map[string]string) map[string]string {
	// Filter out some problematic annotations we don't want in the template.
	delete(Ants, "kubectl.kubernetes.io/last-applied-configuration")
	delete(Ants, "banzaicloud.com/last-applied")
	return Ants
}

// generateServiceAnts generates and returns service annotations
func generateServiceAnts(stsMeta metav1.ObjectMeta, additionalSvcAnnotations map[string]string) map[string]string {
	ants := map[string]string{
		"redis.opsTreeLabs.in":       "true",
		"redis.opsTreeLabs.instance": stsMeta.GetName(),
		"prometheus.io/scrape":       "true",
		"prometheus.io/port":         "9121",
	}
	for k, v := range stsMeta.GetAnnotations() {
		ants[k] = v
	}
	for k := range additionalSvcAnnotations {
		ants[k] = additionalSvcAnnotations[k]
	}

	return filterAnnotations(ants)
}

// LabelSelectors generates object for label selection
func LabelSelectors(labels map[string]string) *metav1.LabelSelector {
	return &metav1.LabelSelector{MatchLabels: labels}
}

func getRedisLabels(name, setupType, role string, labels map[string]string) map[string]string {
	lbs := map[string]string{
		"app":              name,
		"redis_setup_type": setupType,
		"role":             role,
	}
	for k, v := range labels {
		lbs[k] = v
	}
	return lbs
}
